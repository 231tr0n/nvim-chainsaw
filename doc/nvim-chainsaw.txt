*nvim-chainsaw.txt*          For Neovim          Last change: 2024 November 26

==============================================================================
Table of Contents                            *nvim-chainsaw-table-of-contents*

1. nvim-chainsaw                                |nvim-chainsaw-nvim-chainsaw-|
  - Table of Contents         |nvim-chainsaw-nvim-chainsaw--table-of-contents|
  - Features                           |nvim-chainsaw-nvim-chainsaw--features|
  - Installation                   |nvim-chainsaw-nvim-chainsaw--installation|
  - Built-in language support|nvim-chainsaw-nvim-chainsaw--built-in-language-support|
  - Usage                                 |nvim-chainsaw-nvim-chainsaw--usage|
  - Configuration                 |nvim-chainsaw-nvim-chainsaw--configuration|
  - Statusline                       |nvim-chainsaw-nvim-chainsaw--statusline|
  - Similar plugins             |nvim-chainsaw-nvim-chainsaw--similar-plugins|
  - About the developer     |nvim-chainsaw-nvim-chainsaw--about-the-developer|

==============================================================================
1. nvim-chainsaw                                *nvim-chainsaw-nvim-chainsaw-*



Quickand feature-rich insertion of various kinds of log statements.


<https://github.com/chrisgrieser/nvim-chainsaw/assets/73286100/fa55ae24-deba-4fed-84e9-554d9a695ad9>


TABLE OF CONTENTS             *nvim-chainsaw-nvim-chainsaw--table-of-contents*

- |nvim-chainsaw-features|
- |nvim-chainsaw-installation|
- |nvim-chainsaw-built-in-language-support|
- |nvim-chainsaw-usage|
    - |nvim-chainsaw-list-of-commands|
    - |nvim-chainsaw-smart-variable-identification|
- |nvim-chainsaw-configuration|
    - |nvim-chainsaw-base-configuration|
    - |nvim-chainsaw-custom-log-statements|
    - |nvim-chainsaw-have-your-formatter-ignore-the-log-statements|
- |nvim-chainsaw-statusline|
- |nvim-chainsaw-similar-plugins|
- |nvim-chainsaw-about-the-developer|


FEATURES                               *nvim-chainsaw-nvim-chainsaw--features*

- Quick insertion of log statements for the variable under the cursor
    (normal mode) or the selection (visual mode).
- Support for a dozen different log statement types, such as assert statements,
    stacktraces, or acoustic logging.
- Builtin support for ~20 common languages, with dedicated support for
    `nvim-lua`, and easy configuration for additional languages.
- Helper commands to remove all log statements created by `nvim-chainsaw` or
    to clear the console.
- Smart detection of the variable under the cursor via Treesitter.
- Flexible templating options for customizing log statements, including
    support for multi-line templates.
- All commands are dot-repeatable.
- Visual indication of log statements via highlights, signcolumn, or scrollbar
    (when using `satellite.nvim`).


INSTALLATION                       *nvim-chainsaw-nvim-chainsaw--installation*

**Requirements** - nvim 0.10 or higher. - Optional for
|nvim-chainsaw-smart-variable-identification| Treesitterparser for the
respective languages.

>lua
    -- lazy.nvim
    { "chrisgrieser/nvim-chainsaw" },
    
    -- packer
    use { "chrisgrieser/nvim-chainsaw" }
<


BUILT-IN LANGUAGE SUPPORT*nvim-chainsaw-nvim-chainsaw--built-in-language-support*

- JavaScript/TypeScript (and supersets)
- Python
- Lua (with special considerations for `nvim-lua`)
- Shell (and supersets)
- AppleScript
- Ruby
- Rust
- CSS (and supersets)
- Go

Not every language supports every type of log statement. For the concrete
statements used, see log-statements-data.lua
<./lua/chainsaw/config/log-statements-data.lua>.


USAGE                                     *nvim-chainsaw-nvim-chainsaw--usage*

The plugin offers various types of log statements. Bind keymaps for the ones
you want to use.

All operations are dot-repeatable.


LIST OF COMMANDS ~

>lua
    -- log the name & value of the variable under the cursor
    require("chainsaw").variableLog()
    
    -- like variableLog, but with syntax specific to inspect an object such as
    -- `console.log(JSON.stringify(foobar))` in javascript
    require("chainsaw").objectLog()
    
    -- inspect the type of the variable under cursor, such as `typeof foo` in js
    require("chainsaw").typeLog()
    
    -- assertion statement for variable under cursor
    require("chainsaw").assertLog()
    
    -- Minimal log statement, with an emoji for differentiation. Intended for
    -- control flow inspection, that is to quickly glance whether a condition was
    -- triggered or not.
    require("chainsaw").emojiLog()
    
    -- Sound-playing statement for audible debugging.
    -- Depending on the type of log statement, it is either a terminal bell
    -- (requiring the terminal) or a system sound.
    -- Inspired by https://news.ycombinator.com/item?id=41519046
    require("chainsaw").sound()
    
    -- create log statement, and position the cursor to enter a message
    require("chainsaw").messageLog()
    
    -- 1st call: start measuring the time
    -- 2nd call: logs the time duration since
    require("chainsaw").timeLog()
    
    -- debug statements like `debugger` in javascript or `breakpoint()` in python
    require("chainsaw").debugLog()
    
    -- prints the stacktrace of the current call
    require("chainsaw").stacktraceLog()
    
    -- clearing statement, such as `console.clear()`
    require("chainsaw").clearLog()
    
    ---------------------------------------------------
    
    -- remove all log statements created by nvim-chainsaw
    require("chainsaw").removeLogs()
<

These features can also be accessed with the user command `:Chainsaw`. Each
option corresponds to the commands above. For example, `:Chainsaw variableLog`
is same as `:lua require("chainsaw").variableLog()`.

When using lua functions, `variableLog`, `objectLog`, `typeLog`, and
`assertLog` can also be used in **visual mode** to use the visual selection
instead of the word under the cursor.


SMART VARIABLE IDENTIFICATION ~

When the variable under the cursor is an object with fields, `chainsaw`
attempts to automatically select the correct field. Note that this feature
requires the Treesitter parser of the respective language.

>lua
    myVariable.myF[i]eld = "foobar"
    -- prints: myVariable.myField
    
    myVa[r]iable.myField = "foobar"
    -- prints: myVariable
<

Filetypes currently supporting this feature: - Lua - Python - JavaScript (and
supersets)

PRs adding support for more languages are welcome.


CONFIGURATION                     *nvim-chainsaw-nvim-chainsaw--configuration*


BASE CONFIGURATION ~

>lua
    -- default settings
    require("chainsaw").setup {
        -- The marker should be a unique string, since signs and highlgiths are based
        -- on it and since `.removeLogs()` will remove any line with it. Thus, emojis
        -- or unique strings like "[Chainsaw]" are recommended.
        marker = "ü™ö",
    
        -- Appearance of lines with the marker
        visuals = {
            sign = "Û∞πà",
            signHlgroup = "DiagnosticSignInfo",
            statuslineIcon = "Û∞πà",
            lineHlgroup = false,
    
            nvimSatelliteIntegration = {
                enabled = true,
                hlgroup = "DiagnosticSignInfo",
                icon = "‚ñ™",
                leftOfScrollbar = false,
                priority = 40, -- compared to other handlers (diagnostics are 50)
            },
        },
    
        logtypes = {
            emojiLog = {
                emojis = { "üîµ", "üü©", "‚≠ê", "‚≠ï", "üíú", "üî≤" },
            },
        },
    
        logStatements = require("chainsaw.config.log-statements-data"),
    }
<


CUSTOM LOG STATEMENTS ~

Custom log statements can be added in the `setup()` call. There are various
placeholders that are dynamically replaced: - `{{marker}}` inserts the value
from `config.marker`. Each log statement should have one, so that the line can
be removed via `.removeLogs()`. - `{{var}}`variable as described further above.
- `{{time}}`timestamp formatted as `HH:MM:SS` (for millisecond-precision, use
`.timeLog()` instead) - `{{file}}`basename of the current file -
`{{lnum}}`current line number - _.emojiLog() only_`{{emoji}}` inserts the emoji
- _.timeLog() only_`{{index}}` inserts a running index (needed to differentiate
between variables when inserting `timeLog` multiple times).

See log-statements-data.lua <./lua/chainsaw/config/log-statements-data.lua> for
the built-in log statements. PRs adding log statements for more languages are
welcome.

>lua
    require("chainsaw").setup ({
        logStatements = {
            variableLog = {
                javascript = 'console.log("{{marker}} {{var}}:", {{var}});',
                otherFiletype = ‚Ä¶ -- <-- add the statement for your filetype here
            },
            -- the same way for the other log statement operations
        },
    })
<


  [!NOTE] 1. The strings may not include line breaks. If you want to use
  multi-line log statements, use a list of strings instead, each string
  representing one line. 2. See superset-inheritance.lua
  <./lua/chainsaw/superset-inheritance.lua> for how language supersets (such as
  `typescript` inheriting from `javascript`) is handled.

HAVE YOUR FORMATTER IGNORE THE LOG STATEMENTS ~

A common problem is that formatters like `prettier` split up the log statements
into multiple lines, making them hard to read and breaking `.removeLogs()`,
which relies on each line containing the marker emoji.

The simplest method to deal with this is to customize the log statement in your
configuration to include an ignore-comment: `/* prettier-ignore */`.

>lua
    require("chainsaw").setup {
        logStatements = {
            variableLog = {
                javascript = {
                    "/* prettier-ignore */ // {{marker}}", -- adding this
                    'console.log("{{marker}} {{var}}:", {{var}});',
                },
            },
        },
    }
<


STATUSLINE                           *nvim-chainsaw-nvim-chainsaw--statusline*

This function returns number of log statements _by nvim-chainsaw_ in the
current buffer.

>lua
    require("chainsaw.visuals.statusline").countInBuffer()
<


SIMILAR PLUGINS                 *nvim-chainsaw-nvim-chainsaw--similar-plugins*

- debugprint.nvim <https://github.com/andrewferrier/debugprint.nvim>
- refactoring.nvim <https://github.com/ThePrimeagen/refactoring.nvim?tab=readme-ov-file#debug-features>
- logsitter <https://github.com/gaelph/logsitter.nvim>
- timber-.nvim <https://github.com/Goose97/timber.nvim>


ABOUT THE DEVELOPER         *nvim-chainsaw-nvim-chainsaw--about-the-developer*

In my day job, I am a sociologist studying the social mechanisms underlying the
digital economy. For my PhD project, I investigate the governance of the app
economy and how software ecosystems manage the tension between innovation and
compatibility. If you are interested in this subject, feel free to get in
touch.

I also occasionally blog about vim: Nano Tips for Vim
<https://nanotipsforvim.prose.sh>

- Website <https://chris-grieser.de/>
- Mastodon <https://pkm.social/@pseudometa>
- ResearchGate <https://www.researchgate.net/profile/Christopher-Grieser>
- LinkedIn <https://www.linkedin.com/in/christopher-grieser-ba693b17a/>



Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
